x-mongo-environment: &mongo-environment
  - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
  - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
  - MONGO_REPLICA_SET_NAME=${MONGO_REPLICA_SET_NAME}
  - MONGO_DATABASE_NAME=${MONGO_DATABASE_NAME}
  - MONGO_APP_USERNAME=${MONGO_APP_USERNAME}
  - MONGO_APP_PASSWORD=${MONGO_APP_PASSWORD}

x-mongo-replica-common: &mongo-replica-common
  image: mongo
  restart: unless-stopped
  environment: *mongo-environment

services:
#  reason for replica setup:
  # The error you're encountering, pymongo.errors.OperationFailure:
  # Transaction numbers are only allowed on a replica set member or mongos,
  # indicates that you're trying to perform a transaction on a MongoDB instance that is not part of a replica set or sharded cluster (mongos).
  mongo-replica-setup:
    container_name: ${COMPOSE_PROJECT_NAME}_-mongo-setup  # COMPOSE_PROJECT_NAME provided by -p flag of docker-compose command
    image: mongo
    restart: on-failure
    volumes:
      - ./mongo/mongo_setup.sh:/scripts/mongo_setup.sh
    entrypoint: [ "bash", "/scripts/mongo_setup.sh" ]
    environment: *mongo-environment
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  mongo1:
    <<: *mongo-replica-common
    container_name: ${COMPOSE_PROJECT_NAME}_mongo1
    ports:
      - 30001:30001
    command: [ "-f", "/etc/mongod.conf", "--port", "30001", "--keyFile", "/etc/mongo-keyfile", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all" ]
    volumes:
      - ./mongo/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
      - ./mongo/mongod.conf:/etc/mongod.conf
      - ./mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo_data1:/data/db
      - mongo_log1:/var/log/mongodb
    healthcheck:
      test: echo 'rs.status().ok' | mongosh admin --port 30001 -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s

  mongo2:
    <<: *mongo-replica-common
    container_name: ${COMPOSE_PROJECT_NAME}_mongo2
    ports:
      - 30002:30002
    command: [ "-f", "/etc/mongod.conf", "--port", "30002", "--keyFile", "/etc/mongo-keyfile", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all" ]
    volumes:
      - ./mongo/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
      - ./mongo/mongod.conf:/etc/mongod.conf
      - ./mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo_data2:/data/db
      - mongo_log2:/var/log/mongodb
    depends_on:
      - mongo1
    healthcheck:
      test: echo 'rs.status().ok' | mongosh admin --port 30002 -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s

  mongo3:
    <<: *mongo-replica-common
    container_name: ${COMPOSE_PROJECT_NAME}_mongo3
    ports:
      - 30003:30003
    command: [ "-f", "/etc/mongod.conf", "--port", "30003", "--keyFile", "/etc/mongo-keyfile", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all" ]
    volumes:
      - ./mongo/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
      - ./mongo/mongod.conf:/etc/mongod.conf
      - ./mongo/mongo-keyfile:/etc/mongo-keyfile
      - mongo_data3:/data/db
      - mongo_log3:/var/log/mongodb
    depends_on:
      - mongo1
    healthcheck:
      test: echo 'rs.status().ok' | mongosh admin --port 30003 -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s

  minio:
    image: minio/minio
    container_name: ${COMPOSE_PROJECT_NAME}_minio # boto does not support underscores in host names
    ports:
      - "9000:9000"
      - "9090:9090" # terminal
    environment:
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
    volumes:
      - minio_data:/data
    command: [ "server", "--console-address", ":9090", "--address", ":9000", "/data" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  mc:
    image: minio/mc
    container_name: ${COMPOSE_PROJECT_NAME}_mc
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://image-resize-minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD --api S3v4;
      mc admin trace myminio --verbose;
      "
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    restart: unless-stopped
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis:
    image: redis:7
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: [ 'redis-server', '--appendonly', 'yes' ]
    volumes:
      - redis_data:/data


volumes:
  mongo_data:
  redis_data:
  rabbitmq_data:
  minio_data:

  mongo_data1:
  mongo_log1:

  mongo_data2:
  mongo_log2:

  mongo_data3:
  mongo_log3: